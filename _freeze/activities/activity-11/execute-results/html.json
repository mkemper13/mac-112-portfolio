{
  "hash": "6217c549a3645ea576c2375d3627398c",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n:::\n\n\n\n### Exercise 1: Where are my keys? {.unnumbered}\n\n#### Part a {.unnumbered}\n\nDefine two new datasets, with different students and courses:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_2 <- data.frame(\n  student = c(\"D\", \"E\", \"F\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\")\n)\n\n# Check it out\nstudents_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class\n1       D COMP 101\n2       E BIOL 101\n3       F POLI 101\n```\n\n\n:::\n\n```{.r .cell-code}\nenrollments_2 <- data.frame(\n  course = c(\"ART 101\", \"BIOL 101\", \"COMP 101\"),\n  enrollment = c(18, 20, 19)\n)\n\n# Check it out\nenrollments_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    course enrollment\n1  ART 101         18\n2 BIOL 101         20\n3 COMP 101         19\n```\n\n\n:::\n:::\n\n\nTo connect the course enrollments to the students' courses, try do a `left_join()`. You get an error! Identify the problem by reviewing the error message and the datasets we're trying to join.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# eval = FALSE: don't evaluate this chunk when knitting. it produces an error.\nstudents_2 |> \n  left_join(enrollments_2)\n```\n:::\n\n\n#### Part b {.unnumbered}\n\nThe problem is that course name, the **key** or variable that links these two datasets, is labeled differently: `class` in the `students_2` data and `course` in the `enrollments_2` data. Thus we have to specify these keys in our code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_2 |> \n  left_join(enrollments_2, by = c(\"class\" = \"course\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class enrollment\n1       D COMP 101         19\n2       E BIOL 101         20\n3       F POLI 101         NA\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# The order of the keys is important:\n# by = c(\"left data key\" = \"right data key\")\n# The order is mixed up here, thus we get an error:\nstudents_2 |> \n  left_join(enrollments_2, by = c(\"course\" = \"class\"))\n```\n:::\n\n\n#### Part c {.unnumbered}\n\nDefine another set of fake data which adds grade information:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add student grades in each course\nstudents_3 <- data.frame(\n  student = c(\"Y\", \"Y\", \"Z\", \"Z\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\", \"COMP 101\"),\n  grade = c(\"B\", \"S\", \"C\", \"A\")\n)\n\n# Check it out\nstudents_3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class grade\n1       Y COMP 101     B\n2       Y BIOL 101     S\n3       Z POLI 101     C\n4       Z COMP 101     A\n```\n\n\n:::\n\n```{.r .cell-code}\n# Add average grades in each course\nenrollments_3 <- data.frame(\n  class = c(\"ART 101\", \"BIOL 101\",\"COMP 101\"),\n  grade = c(\"B\", \"A\", \"A-\"),\n  enrollment = c(20, 18, 19)\n)\n\n# Check it out\nenrollments_3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     class grade enrollment\n1  ART 101     B         20\n2 BIOL 101     A         18\n3 COMP 101    A-         19\n```\n\n\n:::\n:::\n\n\nTry doing a `left_join()` to link the students' classes to their enrollment info. Did this work? Try and figure out the culprit by examining the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_3 |> \n  left_join(enrollments_3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class, grade)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class grade enrollment\n1       Y COMP 101     B         NA\n2       Y BIOL 101     S         NA\n3       Z POLI 101     C         NA\n4       Z COMP 101     A         NA\n```\n\n\n:::\n:::\n\n\n#### Part d {.unnumbered}\n\nThe issue here is that our datasets have *2* column names in common: `class` and `grade`. BUT `grade` is measuring 2 different things here: individual student grades in `students_3` and average student grades in `enrollments_3`. Thus it doesn't make sense to try to join the datasets with respect to this variable. We can again solve this by specifying that we want to join the datasets using the `class` variable or *key*. What are `grade.x` and `grade.y`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_3 |> \n  left_join(enrollments_3, by = c(\"class\" = \"class\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class grade.x grade.y enrollment\n1       Y COMP 101       B      A-         19\n2       Y BIOL 101       S       A         18\n3       Z POLI 101       C    <NA>         NA\n4       Z COMP 101       A      A-         19\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 2: More small practice {.unnumbered}\n\nBefore applying these ideas to bigger datasets, let's practice identifying which join is appropriate in different scenarios. Define the following fake data on `voters` (people who *have* voted) and `contact` info for voting age adults (people who *could* vote):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# People who have voted\nvoters <- data.frame(\n  id = c(\"A\", \"D\", \"E\", \"F\", \"G\"),\n  times_voted = c(2, 4, 17, 6, 20)\n)\n\nvoters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted\n1  A           2\n2  D           4\n3  E          17\n4  F           6\n5  G          20\n```\n\n\n:::\n\n```{.r .cell-code}\n# Contact info for voting age adults\ncontact <- data.frame(\n  name = c(\"A\", \"B\", \"C\", \"D\"),\n  address = c(\"summit\", \"grand\", \"snelling\", \"fairview\"),\n  age = c(24, 89, 43, 38)\n)\n\ncontact\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age\n1    A   summit  24\n2    B    grand  89\n3    C snelling  43\n4    D fairview  38\n```\n\n\n:::\n:::\n\n\nUse the appropriate join for each prompt below. In each case, think before you type:\n\n-   What dataset goes on the left?\n-   What do you want the resulting dataset to look like? How many rows and columns will it have?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. We want contact info for people who HAVEN'T voted\ncontact %>% \n  anti_join(voters, by = c(\"name\" = \"id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age\n1    B    grand  89\n2    C snelling  43\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. We want contact info for people who HAVE voted\ncontact %>% \n  semi_join(voters, by = c(\"name\" = \"id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age\n1    A   summit  24\n2    D fairview  38\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. We want any data available on each person\ncontact %>%\n  full_join(voters, by = c(\"name\" = \"id\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age times_voted\n1    A   summit  24           2\n2    B    grand  89          NA\n3    C snelling  43          NA\n4    D fairview  38           4\n5    E     <NA>  NA          17\n6    F     <NA>  NA           6\n7    G     <NA>  NA          20\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. When possible, we want to add contact info to the voting roster\nvoters |> \n  left_join(contact, by = c(\"id\" = \"name\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     <NA>  NA\n4  F           6     <NA>  NA\n5  G          20     <NA>  NA\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 3: Bigger datasets {.unnumbered}\n\nLet's apply these ideas to some bigger datasets. In `grades`, each row is a student-class pair with information on:\n\n-   `sid` = student ID\n-   `grade` = student's grade\n-   `sessionID` = an identifier of the class section\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n```\n\n\n:::\n:::\n\n\nIn `courses`, each row corresponds to a class section with information on:\n\n-   `sessionID` = an identifier of the class section\n-   `dept` = department\n-   `level` = course level (eg: 100)\n-   `sem` = semester\n-   `enroll` = enrollment (number of students)\n-   `iid` = instructor ID\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n```\n\n\n:::\n:::\n\n\nUse R code to take a quick glance at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How many observations (rows) and variables (columns) are there in the grades data?\ngrades%>%\n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5844    3\n```\n\n\n:::\n\n```{.r .cell-code}\n# How many observations (rows) and variables (columns) are there in the courses data?\ncourses%>%\n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1718    6\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 4: Class size {.unnumbered}\n\nHow big are the classes?\n\n#### Part a {.unnumbered}\n\nBefore digging in, note that some courses are listed twice in the `courses` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses |> \n  count(sessionID) |> \n  filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sessionID n\n1  session2047 2\n2  session2067 2\n3  session2448 2\n4  session2509 2\n5  session2541 2\n6  session2824 2\n7  session2826 2\n8  session2862 2\n9  session2897 2\n10 session3046 2\n11 session3057 2\n12 session3123 2\n13 session3243 2\n14 session3257 2\n15 session3387 2\n16 session3400 2\n17 session3414 2\n18 session3430 2\n19 session3489 2\n20 session3524 2\n21 session3629 2\n22 session3643 2\n23 session3821 2\n```\n\n\n:::\n:::\n\n\nIf we pick out just 1 of these, we learn that some courses are cross-listed in multiple departments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses |> \n  filter(sessionID == \"session2047\")\n```\n:::\n\n\nFor our class size exploration, obtain the *total* enrollments in each `sessionID`, combining any cross-listed sections. Save this as `courses_combined`. NOTE: There's no joining to do here!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n courses_combined <- courses |> \n   group_by(sessionID) |> \n   summarize(enroll = sum(enroll))\n\n# Check that this has 1695 rows and 2 columns\n dim(courses_combined)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1695    2\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nLet's first examine the question of class size from the *administration*'s viewpoint. To this end, calculate the median class size across all class sections. (The median is the *middle* or 50th percentile. Unlike the *mean*, it's not skewed by outliers.) THINK FIRST:\n\n-   Which of the 2 datasets do you need to answer this question? One? Both?\n-   If you need course information, use `courses_combined` not `courses`.\n-   Do you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses_combined |> \n  summarize(median(enroll))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `median(enroll)`\n             <int>\n1               18\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\nBut how big are classes from the student perspective? To this end, calculate the median class size for each individual student. Once you have the correct output, store it as `student_class_size`. THINK FIRST:\n\n-   Which of the 2 datasets do you need to answer this question? One? Both?\n-   If you need course information, use `courses_combined` not `courses`.\n-   Do you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent_class_size <- grades |> \n  left_join(courses_combined) |> \n  group_by(sid) |> \n  summarize(med_class = median(enroll))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sessionID)`\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(student_class_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  sid    med_class\n  <chr>      <dbl>\n1 S31185      23.5\n2 S31188      21  \n3 S31191      25  \n4 S31194      15  \n5 S31197      24  \n6 S31200      21  \n```\n\n\n:::\n:::\n\n\n#### Part d {.unnumbered}\n\nThe median class size varies from student to student. To get a sense for the typical student experience and range in student experiences, construct and discuss a histogram of the median class sizes experienced by the students.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(student_class_size, aes(x = med_class)) + \n   geom_histogram(color = \"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](activity-11_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 5: Narrowing in on classes {.unnumbered}\n\n#### Part a {.unnumbered}\n\nShow data on the students that enrolled in `session1986`. THINK FIRST: Which of the 2 datasets do you need to answer this question? One? Both?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades |> \n  filter(sessionID == \"session1986\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sid grade   sessionID\n1 S31401    B+ session1986\n2 S32247     B session1986\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nBelow is a dataset with all courses in department E:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndept_E <- courses |> \n  filter(dept == \"E\")\n```\n:::\n\n\nWhat students enrolled in classes in department E? (We just want info on the students, not the classes.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades %>%\n  semi_join(dept_E)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(sessionID)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      sid grade   sessionID\n1  S31245     A session2326\n2  S31470     B session3658\n3  S31470     B session3798\n4  S31470     A session3799\n5  S31938     A session2326\n6  S31968     A session3104\n7  S32022     A session3798\n8  S32046    A- session2326\n9  S32226     A session2326\n10 S32415     B session2835\n11 S32415    B+ session3799\n12 S32484    A- session3658\n```\n\n\n:::\n:::\n\n\n\\\n\\\n\\\n\\\n\n### Exercise 6: All the wrangling {.unnumbered}\n\nUse all of your wrangling skills to answer the following prompts! THINK FIRST:\n\n-   Think about what tables you might need to join (if any). Identify the corresponding variables to match.\n-   You'll need an extra table to convert grades to grade point averages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngpa_conversion <- tibble(\n  grade = c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"AU\", \"S\"), \n  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)\n)\n\ngpa_conversion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 2\n   grade    gp\n   <chr> <dbl>\n 1 A+      4.3\n 2 A       4  \n 3 A-      3.7\n 4 B+      3.3\n 5 B       3  \n 6 B-      2.7\n 7 C+      2.3\n 8 C       2  \n 9 C-      1.7\n10 D+      1.3\n11 D       1  \n12 D-      0.7\n13 NC      0  \n14 AU     NA  \n15 S      NA  \n```\n\n\n:::\n:::\n\n\n#### Part a {.unnumbered}\n\nHow many total student enrollments are there in each department? Order from high to low.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses |> \n  group_by(dept) |> \n  summarize(total = sum(enroll)) |> \n  arrange(desc(total))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 2\n   dept  total\n   <chr> <int>\n 1 d      3046\n 2 j      2312\n 3 O      2178\n 4 M      2129\n 5 m      2105\n 6 D      2003\n 7 W      1960\n 8 q      1859\n 9 k      1824\n10 F      1587\n# ℹ 30 more rows\n```\n\n\n:::\n:::\n\n\n#### Part b {.unnumbered}\n\nWhat's the grade-point average (GPA) for each student?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades |> \n  left_join(gpa_conversion) |> \n  group_by(sid) |> \n  summarize(mean(gp, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(grade)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 443 × 2\n   sid    `mean(gp, na.rm = TRUE)`\n   <chr>                     <dbl>\n 1 S31185                     2.41\n 2 S31188                     3.02\n 3 S31191                     3.21\n 4 S31194                     3.36\n 5 S31197                     3.35\n 6 S31200                     2.2 \n 7 S31203                     3.82\n 8 S31206                     2.46\n 9 S31209                     3.13\n10 S31212                     3.67\n# ℹ 433 more rows\n```\n\n\n:::\n:::\n\n\n#### Part c {.unnumbered}\n\nWhat's the median GPA across all students?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades |> \n  left_join(gpa_conversion) |> \n  group_by(sid) |> \n  summarize(gpa = mean(gp, na.rm = TRUE)) |> \n  summarize(median(gpa))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(grade)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `median(gpa)`\n          <dbl>\n1          3.47\n```\n\n\n:::\n:::\n\n\n#### Part d {.unnumbered}\n\nWhat fraction of grades are below B+?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades |> \n  left_join(gpa_conversion) |> \n  mutate(below_b_plus = (gp < 3.3)) |> \n  summarize(mean(below_b_plus, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(grade)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  mean(below_b_plus, na.rm = TRUE)\n1                        0.2834776\n```\n\n\n:::\n:::\n\n\n#### Part e {.unnumbered}\n\nWhat's the grade-point average for each instructor? Order from low to high.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrades |> \n  left_join(gpa_conversion) |> \n  left_join(courses) |> \n  group_by(iid) |> \n  summarize(gpa = mean(gp, na.rm = TRUE)) |> \n  arrange(gpa)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(grade)`\nJoining with `by = join_by(sessionID)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in left_join(left_join(grades, gpa_conversion), courses): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 64 of `x` matches multiple rows in `y`.\nℹ Row 807 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 364 × 2\n   iid       gpa\n   <chr>   <dbl>\n 1 inst265  1.3 \n 2 inst444  1.7 \n 3 inst513  1.85\n 4 inst200  2   \n 5 inst507  2.2 \n 6 inst445  2.3 \n 7 inst420  2.6 \n 8 inst262  2.65\n 9 inst176  2.66\n10 inst234  2.7 \n# ℹ 354 more rows\n```\n\n\n:::\n:::\n\n\n#### Part f {.unnumbered}\n\nCHALLENGE: Estimate the grade-point average for each department, and sort from low to high. NOTE: Don't include cross-listed courses. Students in cross-listed courses could be enrolled under either department, and we do not know which department to assign the grade to. HINT: You'll need to do multiple joins.\n\n\\\n\\\n\\\n\\\n\n### Exercise 7: HOMEWORK PRACTICE {.unnumbered}\n\nThis exercise is on Homework 4, thus no solutions are provided. In Homework 4, you'll be working with the `Birthdays` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'mosaic'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:Matrix':\n\n    mean\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:purrr':\n\n    cross\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    stat\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(\"Birthdays\")\nhead(Birthdays)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state year month day       date wday births\n1    AK 1969     1   1 1969-01-01  Wed     14\n2    AL 1969     1   1 1969-01-01  Wed    174\n3    AR 1969     1   1 1969-01-01  Wed     78\n4    AZ 1969     1   1 1969-01-01  Wed     84\n5    CA 1969     1   1 1969-01-01  Wed    824\n6    CO 1969     1   1 1969-01-01  Wed    100\n```\n\n\n:::\n:::\n\n\nYou'll also be exploring how the number of daily births is (or isn't!) related to holidays. To this end, import data on U.S. federal holidays [here](data/US-Holidays.csv). NOTE: `lubridate::dmy()` converts the character-string date stored in the CSV to a \"POSIX\" date-number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nholidays <- read.csv(\"https://mac-stat.github.io/data/US-Holidays.csv\") |>\n  mutate(date = as.POSIXct(lubridate::dmy(date)))\n```\n:::\n\n\n#### Part a {.unnumbered}\n\nCreate a new dataset, `daily_births_1980`, which:\n\n-   keeps only `daily_births` related to **1980**\n-   adds a variable called `is_holiday` which is `TRUE` when the day is a holiday, and `FALSE` otherwise. NOTE: `!is.na(x)` is `TRUE` if column `x` is *not* NA, and `FALSE` if it is NA.\n\nPrint out the first 6 rows and confirm that your dataset has 366 rows (1 per day in 1980) and 7 columns. HINT: You'll need to combine 2 different datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define daily_births_1980\n\n\n# Check out the first 6 rows\n\n\n# Confirm that daily_births_1980 has 366 rows and 7 columns\n```\n:::\n\n\n#### Part b {.unnumbered}\n\nPlot the total number of babies born (y-axis) per day (x-axis) in 1980. Color each date according to its day of the week, and `shape` each date according to whether or not it's a holiday. (This is a modified version of 3c!)\n\n\n::: {.cell}\n\n:::\n\n\n#### Part c {.unnumbered}\n\nDiscuss your observations. For example: To what degree does the theory that there tend to be fewer births on holidays hold up? What holidays stand out the most?\n\n#### Part d (OPTIONAL) {.unnumbered}\n\nSome holidays stand out more than others. It would be helpful to label them. Use `geom_text` to add labels to each of the holidays. NOTE: You can set the orientation of a label with the `angle` argument; e.g., `geom_text(angle = 40, ...)`.\n\n\\\n\\\n\\\n\\\n\n### Next steps {.unnumbered}\n\nIf you finish this all during class, you're expected to work on Homework 4. If you're done with Homework 4, you're expected to play around with more TidyTuesday data. Mainly, and naturally, you're expected to spend 112 class time on 112 :)\n\n\\\n\\\n\\\n",
    "supporting": [
      "activity-11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}